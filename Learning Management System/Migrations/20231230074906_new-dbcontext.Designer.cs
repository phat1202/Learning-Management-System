// <auto-generated />
using System;
using Learning_Management_System.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Learning_Management_System.Migrations
{
    [DbContext(typeof(LmsDbContext))]
    [Migration("20231230074906_new-dbcontext")]
    partial class newdbcontext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Learning_Management_System.Models.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Learning_Management_System.Models.CartItem", b =>
                {
                    b.Property<int?>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("CourseId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Learning_Management_System.Models.CategoryCourse", b =>
                {
                    b.Property<int?>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CategoryId");

                    b.ToTable("CategoryCourses");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Web Developement"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Marketing"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "SEO"
                        });
                });

            modelBuilder.Entity("Learning_Management_System.Models.Chapter", b =>
                {
                    b.Property<int?>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ChapterTitle")
                        .HasColumnType("longtext");

                    b.Property<int?>("CourseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TotalNumberOfLesson")
                        .HasColumnType("int");

                    b.HasKey("ChapterId");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Learning_Management_System.Models.Course", b =>
                {
                    b.Property<int?>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("ImageCover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Learning_Management_System.Models.Enrollment", b =>
                {
                    b.Property<int?>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Learning_Management_System.Models.Lesson", b =>
                {
                    b.Property<int?>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LessonName")
                        .HasColumnType("longtext");

                    b.HasKey("LessonId");

                    b.HasIndex("ChapterId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Learning_Management_System.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("StarRate")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Learning_Management_System.Models.StudentProgress", b =>
                {
                    b.Property<int?>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompletionStatus")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastAccessed")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LessonId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProgressId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentProgresses");
                });

            modelBuilder.Entity("Learning_Management_System.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.HasIndex("CartId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Learning_Management_System.Models.CartItem", b =>
                {
                    b.HasOne("Learning_Management_System.Models.Cart", "cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Management_System.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.Navigation("cart");

                    b.Navigation("course");
                });

            modelBuilder.Entity("Learning_Management_System.Models.Chapter", b =>
                {
                    b.HasOne("Learning_Management_System.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("Learning_Management_System.Models.Course", b =>
                {
                    b.HasOne("Learning_Management_System.Models.CategoryCourse", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Management_System.Models.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Learning_Management_System.Models.Enrollment", b =>
                {
                    b.HasOne("Learning_Management_System.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Management_System.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Learning_Management_System.Models.Lesson", b =>
                {
                    b.HasOne("Learning_Management_System.Models.Chapter", "chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId");

                    b.Navigation("chapter");
                });

            modelBuilder.Entity("Learning_Management_System.Models.Rating", b =>
                {
                    b.HasOne("Learning_Management_System.Models.Course", "course")
                        .WithMany("Rating")
                        .HasForeignKey("CourseId");

                    b.HasOne("Learning_Management_System.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("course");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Learning_Management_System.Models.StudentProgress", b =>
                {
                    b.HasOne("Learning_Management_System.Models.Lesson", "lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Management_System.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lesson");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Learning_Management_System.Models.User", b =>
                {
                    b.HasOne("Learning_Management_System.Models.Cart", "cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cart");
                });

            modelBuilder.Entity("Learning_Management_System.Models.Course", b =>
                {
                    b.Navigation("Rating");
                });
#pragma warning restore 612, 618
        }
    }
}
